
# See the docstring in versioneer.py for instructions. Note that you must
# re-run 'versioneer.py setup' after changing this section, and commit the
# resulting files.

[versioneer]
VCS = git
style = pep440
versionfile_source = pandas/_version.py
versionfile_build = pandas/_version.py
tag_prefix = v
parentdir_prefix = pandas-

[flake8]
max-line-length = 79
ignore =
    W503,  # line break before binary operator
    E402,  # module level import not at top of file
    E722,  # do not use bare except
    E731,  # do not assign a lambda expression, use a def
    E741,  # ambiguous variable name 'l'
    C406,  # Unnecessary list literal - rewrite as a dict literal.
    C408,  # Unnecessary dict call - rewrite as a literal.
    C409   # Unnecessary list passed to tuple() - rewrite as a tuple literal.
exclude =
    asv_bench/*.py,  # TODO we should fix linting in those files instead of excluding
    doc/sphinxext/*.py,
    doc/build/*.py,
    doc/temp/*.py,
    .eggs/*.py,
    versioneer.py

[yapf]
based_on_style = pep8
split_before_named_assigns = false
split_penalty_after_opening_bracket = 1000000
split_penalty_logical_operator = 30

[tool:pytest]
minversion = 3.6
testpaths = pandas
markers =
    single: mark a test as single cpu only
    slow: mark a test as slow
    network: mark a test as network
    high_memory: mark a test as a high-memory only
    clipboard: mark a pd.read_clipboard test
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL
addopts = --strict-data-files --durations=10

[coverage:run]
branch = False
omit = */tests/*
plugins = Cython.Coverage

[coverage:report]
ignore_errors = False
show_missing = True
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError
    AbstractMethodError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

[coverage:html]
directory = coverage_html_report
