parameters:
  name: ''
  vmImage: ''

jobs:
- job: ${{ parameters.name }}
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    maxParallel: 11
    matrix:
      py35_np_120:
        ENV_FILE: ci/deps/azure-macos-35.yaml
        CONDA_PY: "35"
        TEST_ARGS: "--skip-slow --skip-network"

  steps:
    - script: |
        if [ "$(uname)" == "Linux" ]; then sudo apt-get install -y libc6-dev-i386; fi
        echo "Installing Miniconda"
        ci/incremental/install_miniconda.sh
        export PATH=$HOME/miniconda3/bin:$PATH
        echo "Setting up Conda environment"
        ci/incremental/setup_conda_environment.sh
      displayName: 'Before Install'
    - script: |
        export PATH=$HOME/miniconda3/bin:$PATH
        source activate pandas-dev
        ci/incremental/build.sh
      displayName: 'Build'
    - script: |
        export PATH=$HOME/miniconda3/bin:$PATH
        source activate pandas-dev
        ci/script_single.sh
        ci/script_multi.sh
        echo "[Test done]"
      displayName: 'Test'
    - script: |
        export PATH=$HOME/miniconda3/bin:$PATH
        source activate pandas-dev && pushd /tmp && python -c "import pandas; pandas.show_versions();" && popd
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'test-data-*.xml'
        testRunTitle: 'MacOS-35'
    - powershell: |
        $junitXml = "test-data-single.xml"
        $(Get-Content $junitXml | Out-String) -match 'failures="(.*?)"'
        if ($matches[1] -eq 0)
        {
          Write-Host "No test failures in test-data-single"
        }
        else
        {
          # note that this will produce $LASTEXITCODE=1
          Write-Error "$($matches[1]) tests failed"
        }

        $junitXmlMulti = "test-data-multiple.xml"
        $(Get-Content $junitXmlMulti | Out-String) -match 'failures="(.*?)"'
        if ($matches[1] -eq 0)
        {
          Write-Host "No test failures in test-data-multi"
        }
        else
        {
          # note that this will produce $LASTEXITCODE=1
          Write-Error "$($matches[1]) tests failed"
        }
      displayName: Check for test failures
